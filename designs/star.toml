# Embroidermodder 2.
#
# Copyright 2011-2024 The Embroidermodder Team
# Embroidermodder 2 is Open Source Software, see LICENSE.md for licensing terms.
#
# Read the reference manual (https://www.libembroidery.org/downloads/emrm.pdf)
# for advice on altering this file.
#
# Command: STAR.
# TODO: min:64 max:8192

/* STAR . */
ScriptValue
star_command(ScriptEnv * context)
{
    return script_null;
}

#if 0
global.numPoints = 5; /* Default */
global.center;
global.point1;
global.point2;
global.mode;

void
main()
{
    init_command();
    clear_selection();
    global.center = NaN;
    global.point1 = NaN;
    global.point2 = NaN;
    global.mode = STAR_MODE_NUM_POINTS;
    prompt_output(translate("Enter number of star points") + " {" + global.numPoints.toString() + "}: ");
}

void
click(EmbVector v)
{
    switch (global.mode) {
    default:
    case STAR_MODE_NUM_POINTS: {
        /* Do nothing, the prompt controls this. */
        break;
    }
    case STAR_MODE_CENTER_PT: {
        global.center = v;
        global.mode = global.mode_RAD_OUTER;
        prompt_output(translate("Specify outer radius of star: "));
        addRubber("POLYGON");
        setRubberMode("POLYGON");
        updateStar(global.cx, global.cy);
        enableMoveRapidFire();
        break;
    }
    case STAR_MODE_RAD_OUTER: {
        global.point1 = v;
        global.mode = global.mode_RAD_INNER;
        prompt_output(translate("Specify inner radius of star: "));
        updateStar(global.x1, global.y1);
        break;
    }
    case STAR_MODE_RAD_INNER: {
        global.point2 = v;
        disableMoveRapidFire();
        updateStar(global.x2, global.y2);
        spareRubber("POLYGON");
        end_command();
        break;
    }
    }
}

void
move(EmbVector mouse)
{
    if (global.mode == global.mode_NUM_POINTS) {
        /* Do nothing, the prompt controls this. */
    }
    else if (global.mode == global.mode_CENTER_PT) {
        /* Do nothing, prompt and click controls this. */
    }
    else if (global.mode == global.mode_RAD_OUTER) {
        updateStar(mouse);
    }
    else if (global.mode == global.mode_RAD_INNER) {
        updateStar(mouse);
    }
}

void
context(str)
{
    todo("STAR", "context()");
}

function
prompt(char *str)
{
    switch (global.mode) {
    case STAR_MODE_NUM_POINTS: {
        if (str == "" && global.numPoints >= 3 && global.numPoints <= 1024) {
            prompt_output(translate("Specify center point: "));
            global.mode = global.mode_CENTER_PT;
        }
        else {
            var tmp = Number(str);
            if (isNaN(tmp) || !isInt(tmp) || tmp < 3 || tmp > 1024) {
                alert(translate("Requires an integer between 3 and 1024."));
                prompt_output(translate("Enter number of star points") + " {" + global.numPoints.toString() + "}: ");
            }
            else {
                global.numPoints = tmp;
                prompt_output(translate("Specify center point: "));
                global.mode = global.mode_CENTER_PT;
            }
        }
        break;
    }
    case STAR_MODE_CENTER_PT: {
        if (!parse_vector(str, &v)) {
            alert(translate("Invalid point."));
            prompt_output(translate("Specify center point: "));
        }
        else {
            global.center = v;
            global.mode = global.mode_RAD_OUTER;
            prompt_output(translate("Specify outer radius of star: "));
            addRubber("POLYGON");
            setRubberMode("POLYGON");
            updateStar(qsnapX(), qsnapY());
            enableMoveRapidFire();
        }
        break;
    }
    case STAR_MODE_RAD_OUTER: {
        if (!parse_vector(str, &v)) {
            alert(translate("Invalid point."));
            prompt_output(translate("Specify outer radius of star: "));
        }
        else {
            global.point1 = v;
            global.mode = global.mode_RAD_INNER;
            prompt_output(translate("Specify inner radius of star: "));
            updateStar(qsnapX(), qsnapY());
        }
        break;
    }
    case STAR_MODE_RAD_INNER: {
        if (!parse_vector(str, &v)) {
            alert(translate("Invalid point."));
            prompt_output(translate("Specify inner radius of star: "));
        }
        else {
            global.point2 = v;
            disableMoveRapidFire();
            updateStar(global.x2, global.y2);
            spareRubber("POLYGON");
            endCommand();
        }
        break;
    }
    default:
        break;
    }
}

void
updateStar(EmbVector v)
{
    float distOuter;
    float distInner;
    float angOuter;

    if (global.mode == STAR_MODE_RAD_OUTER) {
        angOuter = calculateAngle(global.cx, global.cy, v.x, v.y);
        distOuter = calculateDistance(global.cx, global.cy, v.x, v.y);
        distInner = distOuter/2.0;
    }
    else if (global.mode == STAR_MODE_RAD_INNER) {
        angOuter = calculateAngle(global.cx, global.cy, global.x1, global.y1);
        distOuter = calculateDistance(global.cx, global.cy, global.x1, global.y1);
        distInner = calculateDistance(global.cx, global.cy, v.x, v.y);
    }

    /* Calculate the Star Points */
    float angInc = 360.0 / (global.numPoints * 2);
    bool odd = true;
    for (var i = 0; i < global.numPoints*2; i++) {
        float xx = cos(radians(angOuter+(angInc*i)));
        float yy = sin(radians(angOuter+(angInc*i)));
        if (odd) {
            xx *= distOuter;
            yy *= distOuter;
        }
        else {
            xx *= distInner;
            yy *= distInner;
        }
        odd = !odd;
        setRubberPoint("POLYGON_POINT_" + i.toString(), global.cx + xx, global.cy + yy);
    }
    setRubberText("POLYGON_NUM_POINTS", (global.numPoints*2 - 1).toString());
}
#endif
