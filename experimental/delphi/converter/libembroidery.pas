unit libembroidery;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 25/01/2014                                            }
{    Generated Time: 04:24:18                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


type

  EmbColor = record
    r: Byte;
    g: Byte;
    b: Byte;
  end {EmbColor_};
  
  EmbPoint = record
    xx: Double;   {= absolute position (not relative) }
    yy: Double;   {= positive is up, units are in mm }
  end {EmbPoint_};

  PEmbPointList = ^EmbPointList;
  EmbPointList = record
    point: EMBPOINT;
    next: PEMBPOINTLIST;
  end {EmbPointList_};

  EmbPointObject = record
    point: EMBPOINT;
	  // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbPointObject_};

  PEmbPointObjectList = ^EmbPointObjectList;
  EmbPointObjectList = record
    pointObj: EMBPOINTOBJECT;
    next: PEMBPOINTOBJECTLIST;
  end {EmbPointObjectList_};


  EmbSettings = record
    dstJumpsPerTrim: Word;
    home: EmbPoint;
  end {EmbSettings_};

  EmbHoop = record
    width: Double;
    height: Double;
  end {EmbHoop_};

  EmbStitch = record
    flags: Integer;   {= uses codes defined above }
    xx: Double;       {= absolute position (not relative) }
    yy: Double;       {= positive is up, units are in mm }
    color: Integer;
  end {EmbStitch_};

  PEmbStitchList = ^EmbStitchList;
  EmbStitchList = record
    stitch: EmbStitch;
    next: PEmbStitchList;
  end;


  EmbThread = record
    color: EMBCOLOR;
    description: PCHAR;
    catalogNumber: PCHAR;
  end {EmbThread_};

  PEmbThreadList = ^EmbThreadList;
  EmbThreadList = record
    thread: EMBTHREAD;
    next: PEmbThreadList;
  end {EmbThreadList_};


  EmbArc = record
    startX: Double; {= absolute position (not relative) }
    startY: Double;
    midX: Double;   {= absolute position (not relative) }
    midY: Double;
    endX: Double;   {= absolute position (not relative) }
    endY: Double;
  end {EmbArc_};

  EmbArcObject = record
    arc: EMBARC;  {+// Properties*/ }
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbArcObject_};


  PEmbArcObjectList = ^EmbArcObjectList;
  EmbArcObjectList = record
    arcObj: EMBARCOBJECT;
    next: PEMBARCOBJECTLIST;
  end {EmbArcObjectList_};



  EmbCircle = record
    centerX: Double;
    centerY: Double;
    radius: Double;
  end {EmbCircle_};

  EmbCircleObject = record
    circle: EMBCIRCLE;

    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbCircleObject_};

  PEmbCircleObjectList = ^EmbCircleObjectList;
  EmbCircleObjectList = record
    circleObj : EmbCircleObject;
    next : PEmbCircleObjectList;
  end;

  EmbEllipse = record
    centerX: Double;
    centerY: Double;
    radiusX: Double;
    radiusY: Double;
  end {EmbEllipse_};

  EmbEllipseObject = record
    ellipse: EMBELLIPSE;
    rotation: Double;
    //Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbEllipseObject_};

  PEmbEllipseObjectList = ^EmbEllipseObjectList;
  EmbEllipseObjectList = record
    EllipseObj : EmbEllipseObject;
    next : PEmbEllipseObjectList;
  end;


  EmbLine = record
    x1: Double;
    y1: Double;
    x2: Double;
    y2: Double;
  end {EmbLine_};

  EmbLineObject = record
    line: EMBLINE;

    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbLineObject_};


  PEmbLineObjectList = ^EmbLineObjectList;
  EmbLineObjectList = record
    LineObj : EmbLineObject;
    next : PEmbLineObjectList;
  end;

type
  EmbFlag = Integer;

  PEmbFlagList = ^EmbFlagList;
  EmbFlagList = record
    flag: Integer;
    next: PEMBFLAGLIST;
  end {EmbFlagList_};

  EmbPathObject = record
    pointList: PEMBPOINTLIST;
    flagList: PEMBFLAGLIST;
    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbPathObject_};
  PEmbPathObject = ^EmbPathObject;

  PEmbPathObjectList = ^EmbPathObjectList;
  EmbPathObjectList = record
    pathObj: PEMBPATHOBJECT;
    next: PEMBPATHOBJECTLIST;
  end {EmbPathObjectList_};

  EmbPolygonObject = record
    pointList: PEMBPOINTLIST;
    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbPolygonObject_};
  PEmbPolygonObject = EmbPolygonObject;


  PEmbPolygonObjectList = ^EmbPolygonObjectList;
  EmbPolygonObjectList = record
    polygonObj: PEMBPOLYGONOBJECT;
    next: PEMBPOLYGONOBJECTLIST;
  end {EmbPolygonObjectList_};


  EmbPolylineObject = record
    pointList: PEMBPOINTLIST;
    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbPolylineObject_};
  PEmbPolylineObject= ^EmbPolylineObject;

  PEmbPolylineObjectList = ^EmbPolylineObjectList;
  EmbPolylineObjectList = record
    polylineObj: PEMBPOLYLINEOBJECT;
    next: PEMBPOLYLINEOBJECTLIST;
  end {EmbPolylineObjectList_};


  EmbRect = record
    top: Double;
    left: Double;
    bottom: Double;
    right: Double;
  end {EmbRect_};

  EmbRectObject = record
    rect: EMBRECT;
    rotation: Double;
    radius: Double;
    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbRectObject_};


  PEmbRectObjectList = ^PEmbRectObjectList;
  EmbRectObjectList = record
    rectObj: EMBRECTOBJECT;
    next: PEMBRECTOBJECTLIST;
  end {EmbRectObjectList_};


  EmbBezier = record
    startX: Double;
    startY: Double;
    control1X: Double;
    control1Y: Double;
    control2X: Double;
    control2Y: Double;
    endX: Double;
    endY: Double;
  end {EmbBezier_};

  PEmbSplineObject = ^EmbSplineObject;
  EmbSplineObject = record
    bezier: EMBBEZIER;
    next: PEMBSPLINEOBJECT;
    // Properties
    lineType: Integer;
    color: EMBCOLOR;
  end {EmbSplineObject_};

{ A list of bezier curves is a B-spline }
  PEmbSplineObjectList = ^EmbSplineObjectList;
  EmbSplineObjectList = record
    splineObj: EMBSPLINEOBJECT;
    next: PEMBSPLINEOBJECTLIST;
  end {EmbSplineObjectList_};

  EmbPattern = record
    settings: EMBSETTINGS;
    hoop: EMBHOOP;
    stitchList: PEMBSTITCHLIST;
    threadList: PEMBTHREADLIST;
    arcObjList: PEMBARCOBJECTLIST;
    circleObjList: PEMBCIRCLEOBJECTLIST;
    ellipseObjList: PEMBELLIPSEOBJECTLIST;
    lineObjList: PEMBLINEOBJECTLIST;
    pathObjList: PEMBPATHOBJECTLIST;
    pointObjList: PEMBPOINTOBJECTLIST;
    polygonObjList: PEMBPOLYGONOBJECTLIST;
    polylineObjList: PEMBPOLYLINEOBJECTLIST;
    rectObjList: PEMBRECTOBJECTLIST;
    splineObjList: PEMBSPLINEOBJECTLIST;
    lastStitch: PEMBSTITCHLIST;
    lastThread: PEMBTHREADLIST;
    lastArcObj: PEMBARCOBJECTLIST;
    lastCircleObj: PEMBCIRCLEOBJECTLIST;
    lastEllipseObj: PEMBELLIPSEOBJECTLIST;
    lastLineObj: PEMBLINEOBJECTLIST;
    lastPathObj: PEMBPATHOBJECTLIST;
    lastPointObj: PEMBPOINTOBJECTLIST;
    lastPolygonObj: PEMBPOLYGONOBJECTLIST;
    lastPolylineObj: PEMBPOLYLINEOBJECTLIST;
    lastRectObj: PEMBRECTOBJECTLIST;
    lastSplineObj: PEMBSPLINEOBJECTLIST;
    
    currentColorIndex: Integer;
    lastX: Double;
    lastY: Double;
  end {EmbPattern_};
  PEmbPattern = ^EmbPattern;


var
  embPattern_create: function(): PEMBPATTERN cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
  embPattern_read: function(pattern: PEMBPATTERN;
                            const fileName: PChar): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

  embPattern_write: function(const pattern: PEMBPATTERN; 
                             const fileName: PChar): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

  embFormat_type: function(const fileName: PChar): Integer cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('libembroidery.dll');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;

    @embPattern_create := GetProcAddress(DLLHandle,'embPattern_create');
  {$IFDEF WIN32}
    //Assert(pointer(longint(@embPattern_read)) <> nil);
  {$ENDIF}

    @embPattern_read := GetProcAddress(DLLHandle,'embPattern_read');
  {$IFDEF WIN32}
    //Assert(@embPattern_read <> nil);
  {$ENDIF}

    @embPattern_write := GetProcAddress(DLLHandle,'embPattern_write');
  {$IFDEF WIN32}
    //Assert(@embPattern_write <> nil);
  {$ENDIF}

    @embFormat_type := GetProcAddress(DLLHandle,'embFormat_type');
  end
  else
  begin
    DLLLoaded := False;
    { Error: LIBEMBROIDERMODDER2.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

initialization
  LoadDLL;
end.
