# Postscript functions and configuration for the heart5 design.
# -------------------------------------------------------
# This file is part of Embroidermodder.
# Copyright 2013-2022 The Embroidermodder Team
# See LICENSE for details.
# -------------------------------------------------------
#

command = "heart5"
range = [0.0, 2.0]
num_points = 512
scale = [0.04, 0.04]
variable = "t"
x = "16 t sin dup dup mul mul mul"
y = """
    13 t cos mul
    5 2 t mul cos mul sub
    2 3 t mul cos mul sub
    4 t mul cos sub
"""

/* Command: HEART
 * TODO: min:64 max:8192
 *
 * Heart4: 10.0 / 512
 * Heart5: 1.0 / 512
 */
ScriptValue
heart_command(ScriptEnv *context)
{
    init_command();
    clear_selection();

    /*
    global.numPoints = 512;
    global.center.x = NaN;
    global.center.y = NaN;
    global.scale.x = 1.0;
    global.scale.y = 1.0;
    global.mode = HEART_MODE_NUM_POINTS;

    addRubber("POLYGON");
    setRubberMode("POLYGON");
    updateHeart("HEART5", global.numPoints, global.sx, global.sy);
    spareRubber("POLYGON");

    switch (context->context) {
    case CONTEXT_MAIN:
        break;
    case CONTEXT_CLICK:
        break;
    case CONTEXT_MOVE:
        break;
    case CONTEXT_CONTEXT:
        todo("HEART", "context()");
        break;
    case CONTEXT_PROMPT:
        break;
    default:
        break;
    }
    */

    end_command();
    return script_null;
}

void
updateHeart(int style, int numPts, float xScale, float yScale)
{
    int i;
    for (i = 0; i <= numPts; i++) {
        EmbVector v;
        float t = ((2.0f * embConstantPi) / numPts) * i; 
        v.x = 0.0f;
        v.y = 0.0f;

        switch (style) {
        case HEART_STYLE_4: {
            v.x = cos(t)*((sin(t)*sqrt(abs(cos(t))))/(sin(t)+7/5) - 2*sin(t) + 2);
            v.y = sin(t)*((sin(t)*sqrt(abs(cos(t))))/(sin(t)+7/5) - 2*sin(t) + 2);
            break;
        }
        default:
        case HEART_STYLE_5: {
            v.x = 16*pow(sin(t), 3);
            v.y = 13*cos(t) - 5*cos(2*t) - 2*cos(3*t) - cos(4*t);
            break;
        }
        }

        /* setRubberPoint("POLYGON_POINT_" + i.toString(), v.x*xScale, v.y*yScale); */
    }

    /* setRubberText("POLYGON_NUM_POINTS", numPts.toString()); */
}
